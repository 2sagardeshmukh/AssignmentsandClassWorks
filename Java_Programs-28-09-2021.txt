//ComaparableDemo
//problem: comapare student info with marks

//Student Class
package com.torryharris.spack;

public class Student implements Comparable<Student> {
    private int id;
    private String name;
    private int marks;

    public Student(int id, String name, int marks) {
        this.id = id;
        this.name = name;
        this.marks = marks;
    }

    @Override
    public String toString() {
        return "Student{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", marks=" + marks +
                '}';
    }

   //s1.compareTo(s2)
    @Override
    public int compareTo(Student s) {
        if(marks>s.marks)
            return 1;
        else
            if(marks==s.marks)
                return 0;
            else
                return -1;
    }
}

//Main Class
package com.torryharris.mainpack;

import com.torryharris.spack.Student;

import java.util.ArrayList;
import java.util.Collections;

public class Main {

    public static void main(String[] args) {
        ArrayList<Student> slist = new ArrayList<Student>();

        slist.add(new Student(10,"erf",75));
        slist.add(new Student(20,"ghj",85));
        slist.add(new Student(30,"jkl",65));
        slist.add(new Student(40,"erf",75));
        slist.add(new Student(50,"bnf",55));
        System.out.println("printing before sorting");
       for(Student s:slist) {
           System.out.println(s);
       }

        Collections.sort(slist);
        System.out.println("printing after sorting");
        for(Student s:slist) {
            System.out.println(s);
        }



    }
}

output:
printing before sorting
Student{id=10, name='erf', marks=75}
Student{id=20, name='ghj', marks=85}
Student{id=30, name='jkl', marks=65}
Student{id=40, name='erf', marks=75}
Student{id=50, name='bnf', marks=55}
printing after sorting
Student{id=50, name='bnf', marks=55}
Student{id=30, name='jkl', marks=65}
Student{id=10, name='erf', marks=75}
Student{id=40, name='erf', marks=75}
Student{id=20, name='ghj', marks=85}
---------------------------------------------------------------------------------
//further sorting with based id 
package com.torryharris.spack;

public class Student implements Comparable<Student> {
    private int id;
    private String name;
    private int marks;

    public Student(int id, String name, int marks) {
        this.id = id;
        this.name = name;
        this.marks = marks;
    }

    @Override
    public String toString() {
        return "Student{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", marks=" + marks +
                '}';
    }

   //s1.compareTo(s2)
    // sorting in natural order or in Ascending order
    @Override
    public int compareTo(Student s) {
        if(marks<s.marks)  // it sorts in ascending order
            return 1;      // for descending order make as if(marks<s.marks)
        else
            if(marks==s.marks)
            {
                if(id>s.id)  //if marks are equal then it selects based on ascending order of id
                    return 1;
                else
                    if(id==s.id)
                        return 0 ;
                    else
                        return -1;
            }

            else
                return -1;
    }
}
//Main
package com.torryharris.mainpack;

import com.torryharris.spack.Student;

import java.util.ArrayList;
import java.util.Collections;

public class Main {

    public static void main(String[] args) {
        ArrayList<Student> slist = new ArrayList<Student>();

        slist.add(new Student(10,"erf",75));
        slist.add(new Student(20,"ghj",85));
        slist.add(new Student(30,"jkl",65));
        slist.add(new Student(40,"erf",75));
        slist.add(new Student(50,"bnf",55));
        System.out.println("printing before sorting");
       for(Student s:slist) {
           System.out.println(s);
       }

        Collections.sort(slist);  // working on principle of quicksort
        System.out.println("printing after sorting");
        for(Student s:slist) {
            System.out.println(s);
        }



    }
}

output:
printing before sorting
Student{id=10, name='erf', marks=75}
Student{id=20, name='ghj', marks=85}
Student{id=30, name='jkl', marks=65}
Student{id=40, name='erf', marks=75}
Student{id=50, name='bnf', marks=55}
printing after sorting
Student{id=20, name='ghj', marks=85}
Student{id=10, name='erf', marks=75}
Student{id=40, name='erf', marks=75}
Student{id=30, name='jkl', marks=65}
Student{id=50, name='bnf', marks=55}
---------------------------------------------------------------------------------
//ComaparableDemo
//Created ppack in that created Person Class
//Createdcomparator pack in that created AgeComparator  and Namecomparator Class
package com.torryharris.ppack;

//Person Class
public class Person {

    private int id;
    private String name;
    private int age;

    public Person(int id, String name, int age) {
        this.id = id;
        this.name = name;
        this.age = age;
    }


    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    @Override
    public String toString() {
        return "Person{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", age=" + age +
                '}';
    }
}

//AgeComparator
package com.torryharris.comparatorpack;

import com.torryharris.ppack.Person;

import java.util.Comparator;

public class AgeComparator implements Comparator<Person> {
    @Override
    public int compare(Person p1, Person p2) {
        if(p1.getAge()>p2.getAge())
            return 1;
        else
            if(p1.getAge()== p2.getAge())
                return 0;
            else
                return -1;
    }
}

//NameComparator
package com.torryharris.comparatorpack;

import com.torryharris.ppack.Person;

import java.util.Comparator;

public class NameComparator implements Comparator<Person> {
    @Override
    public int compare(Person p1, Person p2) {

        return(p1.getName().compareTo(p2.getName()));  //we used compare to method for strings
    }
}

//Main Class
package com.torryharris.mainpack;

import com.torryharris.comparatorpack.AgeComparator;
import com.torryharris.comparatorpack.NameComparator;
import com.torryharris.ppack.Person;

import java.util.ArrayList;
import java.util.Collections;

public class Main {

    public static void main(String[] args) {

        ArrayList<Person> plist = new ArrayList<Person>();
        plist.add(new Person(01,"sagar",21));
        plist.add(new Person(02,"akash",45));
        plist.add(new Person(03,"shridhar",56));
        plist.add(new Person(04,"prashant",25));
        System.out.println(plist);

        Collections.sort(plist,new AgeComparator());
        System.out.println(plist);

        Collections.sort(plist,new NameComparator());
        System.out.println(plist);

    }
}

output:
[Person{id=1, name='sagar', age=21}, Person{id=2, name='akash', age=45}, Person{id=3, name='shridhar', age=56}, Person{id=4, name='prashant', age=25}]
[Person{id=1, name='sagar', age=21}, Person{id=4, name='prashant', age=25}, Person{id=2, name='akash', age=45}, Person{id=3, name='shridhar', age=56}]
[Person{id=2, name='akash', age=45}, Person{id=4, name='prashant', age=25}, Person{id=1, name='sagar', age=21}, Person{id=3, name='shridhar', age=56}]

---------------------------------------------------------------------------------
//CollectionPriorityQueueDemo
//Item Class
package com.torryharris.ipack;

public class Item implements Comparable<Item> {
    private int id;
    private String name;

    public Item(int id, String name) {
        this.id = id;
        this.name = name;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    @Override
    public String toString() {
        return "Item{" +
                "id=" + id +
                ", name='" + name + '\'' +
                '}';
    }

    // the least id value will be given the most priority
    @Override
    public int compareTo(Item i) {
        if(id>i.id)
            return 1;
        else
            if(id==i.id)
                return 0;
            else
                return -1;
    }
}


//Main Class
package com.torryharris.mainpack;

import com.torryharris.ipack.Item;

import java.util.PriorityQueue;
import java.util.Queue;

public class Main {

    public static void main(String[] args) {

        Queue<Item> pq = new PriorityQueue<Item>();
        pq.add(new Item(154,"Java"));
        pq.add(new Item(144,"C"));
        pq.add(new Item(164,"C++"));
        pq.add(new Item(154,"Python"));
        pq.add(new Item(170,"Ruby"));


        for(Item i:pq)
        {
            System.out.println(i);
        }

        System.out.println("the object removed is :");
        System.out.println(pq.poll());
        System.out.println("************************");

        for(Item i:pq)
        {
            System.out.println(i);
        }
        System.out.println("the object removed is :");
        System.out.println(pq.poll());
        System.out.println("************************");

        for(Item i:pq)
        {
            System.out.println(i);
        }
        System.out.println("the object removed is :");
        System.out.println(pq.poll());
        System.out.println("************************");






    }
}


Item{id=144, name='C'}
Item{id=154, name='Java'}
Item{id=164, name='C++'}
Item{id=154, name='Python'}
Item{id=170, name='Ruby'}
the object removed is :
Item{id=144, name='C'}
************************
Item{id=154, name='Java'}
Item{id=154, name='Python'}
Item{id=164, name='C++'}
Item{id=170, name='Ruby'}
the object removed is :
Item{id=154, name='Java'}
************************
Item{id=154, name='Python'}
Item{id=170, name='Ruby'}
Item{id=164, name='C++'}
the object removed is :
Item{id=154, name='Python'}
************************

---------------------------------------------------------------------------------
//Generic Class Demo
// Class which does not have datatypes and user can define his own data types is called as generic class

//Test Class
package com.torryharris.gpack;

//
public class Test<T,U> {

    private  T ob1;          //T,U  are userdefined datatypes
    private U ob2;

    public Test(T ob1, U ob2) {
        this.ob1 = ob1;
        this.ob2 = ob2;
    }

    public T getOb1() {
        return ob1;
    }

    public U getOb2() {
        return ob2;
    }

    @Override
    public String toString() {
        return "Test{" +
                "ob1=" + ob1 +
                ", ob2=" + ob2 +
                '}';
    }
}


//Product Class
package com.torryharris.gpack;

public class Product {

    private int pId;
    private String pName;

    public Product(int pId, String pName) {
        this.pId = pId;
        this.pName = pName;
    }

    @Override
    public String toString() {
        return "Product{" +
                "pId=" + pId +
                ", pName='" + pName + '\'' +
                '}';
    }
}


//Main Class
package com.torryharris.mainpack;

import com.torryharris.gpack.Product;
import com.torryharris.gpack.Test;

public class Main {

    public static void main(String[] args) {

        Test<String,String> tob = new Test<String,String>("Hello","World");  // we can pass 2 Strings
        System.out.println(tob);
        Test<Integer,String> tob1 = new Test<Integer,String>(100,"World");   // we can one integer and one String
        System.out.println(tob1);
        Test<Integer,Product> tob2 = new Test<Integer,Product>(100,new Product(01,"Sagar"));  //we can pass one Integer and another one as Class
        System.out.println(tob2);

        /*Test<String,String> to1 = new Test<String,String>("Hello","World");
        System.out.println(to1);*/

        /*myObj.setName("John"); // Set the value of the name variable to "John"
        System.out.println(myObj.getName());*/


        /*Test<String,String> tob = new Test<String,String>("Hello","vfdg");
        System.out.println(tob.getOb1());*/


    }
}


output:
Test{ob1=Hello, ob2=World}
Test{ob1=100, ob2=World}
Test{ob1=100, ob2=Product{pId=1, pName='Sagar'}}

---------------------------------------------------------------------------------
//Generic function Demo
// we can give userdefined function or method to class

// Test Class
package com.torryharris.tpack;

public class Test {
    public static <T> void printArray(T[] arr)
    {
        for (T ele:arr)             //prints the contents of T array method.
        {
            System.out.println(ele);
        }
    }

}

//Product Class
package com.torryharris.tpack;

public class Product {

    private int pid;
    private String pName;

    public Product(int pid, String pName) {
        this.pid = pid;
        this.pName = pName;
    }

    @Override
    public String toString() {
        return "Product{" +
                "pid=" + pid +
                ", pName='" + pName + '\'' +
                '}';
    }
}


//Main Class
package com.torryharris.mainpack;

import com.torryharris.tpack.Product;
import com.torryharris.tpack.Test;

public class Main {

    public static void main(String[] args) {

        Integer[] intarr = {3,5,7,9};
        Test.printArray(intarr);

        String[] sarr = {"sagar","akash","prashant"};   //we can also pass Strings into Test
        Test.printArray(sarr);

        Product[] parr = {new Product(100,"akash")}; //we can also pass Class contents into Test
        Test.printArray(parr);

       /* Product of = new Product(100,"sdd");
        System.out.println(of);*/

    }
}


output:
3
5
7
9
sagar
akash
prashant
Product{pid=100, pName='akash'}

---------------------------------------------------------------------------------
//Generic function with bounds

//Test Class
package com.torryharris.tpack;

import java.awt.*;
import java.util.List;

public class Test {

    //Number is the base class for all numeric Wrapper Classes
    // they are (Integer,Double,Byte,Long, Short are subclasses of Number base class
    // lower to Upperbound
    public static Number sumOflist(List<? extends Number > nlist)        //Extending SubClasses to Number
    {
        int s = 0;
        for (Number n:nlist)
        {
            s+=n.doubleValue();
        }
        return s;
    }
    // lower bound to double
    // Upcasted classes : Number and Object
    public  static Number sumOflist1(List<? super Double>llist)   // converting Number to Double
    {
        double s = 0.0;
        for (Object n:llist)
        {
            s+= ((Number)n).doubleValue();
        }
        return s;
    }

    //Unbounded takes Object class references

    public  static  Number sumOflist2(List<?>list)   // irre
    {
        double s = 0.0;
        for (Object n:list)
        {
            s+= ((Number)n).doubleValue();
        }
        return s;
    }




}

//Main Class
package com.torryharris.mainpack;

import com.torryharris.tpack.Test;

import java.util.ArrayList;

public class Main {

    public static void main(String[] args) {

        ArrayList<Integer> ilist = new ArrayList<>();
        ilist.add(10);
        ilist.add(10);
        ilist.add(10);
        ilist.add(10);
        ilist.add(10);

        System.out.println(Test.sumOflist(ilist));

        ArrayList<Double> dlist = new ArrayList<Double>();
        dlist.add(10.0);
        dlist.add(10.0);
        dlist.add(10.0);
        dlist.add(10.0);
        dlist.add(10.0);

        System.out.println(Test.sumOflist1(dlist));

        ArrayList<Object> olist = new ArrayList<Object>();
        olist.add(10);
        olist.add(10);
        olist.add(10);
        olist.add(10);
        olist.add(10);

        System.out.println(Test.sumOflist2(olist));



    }
}

output:
50
50.0
50.0

---------------------------------------------------------------------------------
//Junit Demo
// programming and testing at a time

//Even odd class
public class EvenOddClass {

    public boolean isEvenNumber(int number)
    {
        if (number%2==0) {
            return true;
        }
        return
                false;
    }

}

//EvenTest   //Tests the Evenoddd class
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class EvenTest {

    @Test
    public void test1()
    {
        EvenOddClass ob = new EvenOddClass();
       assertEquals(true,ob.isEvenNumber(12));
    }

    @Test
    public void test2()
    {
        EvenOddClass ob = new EvenOddClass();
        assertEquals(false,ob.isEvenNumber(11));
    }
}


---------------------------------------------------------------------------------
//Junit Demo2

//TestClass
import org.junit.Test;

import static org.junit.Assert.*;

public class TestClass {

    @Test
    public  void test()
    {
        int val1 = 5;
        int val2 = 6;

        assertTrue(val1<val2);
        assertFalse(val1>val2);

        String str1 = "abc";
        String str2 = "abc";

        // Check if both references are the same
        assertSame(str1,str2);

        String[] earray = {"One", "Two", "Three"};

        String[] rarray = {"One", "Two", "Three"};

        assertArrayEquals(earray,rarray);
        assertEquals(str1,str2);
    }


}

---------------------------------------------------------------------------------
//JunitSuite Demo
// running two cases At a time ----> Suite

//Message Util Class
public class MessageUtil {

    private String message;

    public MessageUtil(String message) {
        this.message = message;
    }

    // print the message
    public String printMessage()
    {
        System.out.println(message);
        return(message);
    }

    public String salutationMessage()
    {
        message = "Hello"+message;
        System.out.println(message);
        return message;
    }
}


//Test1
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class Test1 {

    String message = "Robert";

    MessageUtil mob = new MessageUtil(message);

    @Test
    public void Test()
    {
        System.out.println("Inside Test1 testing print message method");
        assertEquals(message,mob.printMessage());
    }

}


//Test2
import org.junit.Test;

import static org.junit.Assert.assertEquals;
public class Test2 {

    String message = "Robert";
    MessageUtil mob = new MessageUtil(message);

    @Test
    public void Test()
    {
        System.out.println("Inside Test2 testing salutationMessage method");
        message = "Hello"+message;
        assertEquals(message,mob.salutationMessage());
    }
}


//TestSuite
import org.junit.runner.RunWith;
import org.junit.runners.Suite;


@RunWith(Suite.class)
@Suite.SuiteClasses(
        {
                Test1.class,
                Test2.class,})


public class TestSuite {


}


output:
Inside Test1 testing print message method
Robert
Inside Test2 testing salutationMessage method
HelloRobert

Process finished with exit code 0

---------------------------------------------------------------------------------
//Files
//FileAttribuesDemo

//Main Class
package com.torryharris.mainpack;

import java.io.File;
import java.io.IOException;

public class Main {

    public static void main(String[] args) {
        File file1 = new File("C:\\Users\\sagar_deshmukh\\Desktop\\thfile1.txt");

        try {
            file1.createNewFile();
            System.out.println("File created successfully");
        } catch (IOException e) {
            e.printStackTrace();
        }

        System.out.println(file1.getAbsolutePath());
        System.out.println(file1.getName());
        System.out.println(file1.getParentFile());

        File file2 = new File("C:\\Users\\sagar_deshmukh\\Desktop","thfile2.txt");
        try {
            file2.createNewFile();
        } catch (IOException e) {
            e.printStackTrace();
        }

        File dir = new File("C:\\Users\\sagar_deshmukh\\Documents");

        File[] filelist = dir.listFiles();

        // to list only the files in Documents directory

        for (File f:filelist)
        {
            if (f.isFile())
                System.out.println(f.getName());
        }

    }
}

output:
File created successfully
C:\Users\sagar_deshmukh\Desktop\thfile1.txt
thfile1.txt
C:\Users\sagar_deshmukh\Desktop
abstractclassdemo.txt
basic-problems-on-shell-script-1.txt
desktop.ini
ExceptionHandling3Methods.txt
Gitbash-Unix_commands-Shell_script.odt
importantworkinglinks.txt
Java_1Assignment-20-09-2021.txt
Java_2Assignment-22-09-2021.txt
Java_Assignment2-22-09-2021.odt
Java_Practiseddemos_Assignment.txt
Java_Programs-20-09-2021.txt
Java_Programs-21-09-2021.txt
Java_Programs-22-09-2021.txt
Java_Programs-23-09-2021.txt
Java_Programs-24-09-2021.txt
Java_Programs-27-09-2021.txt
Java_Programs-28-09-2021.txt
linux-and-git-bash-commands.odt
Mainclass_for_InhertanceDemo.txt
mongodb-17-09-2021.odt
mongodb_assignment.odt
mysql-13-09-2021.odt
mysql-13-09.odt
mysql-14-09-2021.odt
mysql-15-09-2021.odt
mysql-numeric-functions.odt
mysql-numeric-functions.txt
My_own_Java_Notes.txt
session2.txt
SQL-mongodb-16-09-2021.odt
temp.txt
Untitled 2.odt

---------------------------------------------------------------------------------
//FileCharacterDemo
//Main Class
package com.torryharris.mainpack;

import java.io.*;

public class Main {

    public static void main(String[] args) {

        File file1 = new File("C:\\Users\\sagar_deshmukh\\Desktop\\thfile1.txt");
        try(FileReader fr = new FileReader(file1);
        BufferedReader br = new BufferedReader(fr);)
        {
            String str;
           str = br.readLine();
           while(!str.equals("END"))
            /*while((str = br.readLine())!=null)*/
            {
                System.out.println(str);
                str = br.readLine();

            }

        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

output:
good morning
E sala cup bere avardu
begin
survive

---------------------------------------------------------------------------------

